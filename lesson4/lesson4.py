# abspath - –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É


"F:\DotPack Projects\HILLEL\Courses2\PythonScriptTimEnought\lesson4\lesson4.py"

import os # os - –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ (—Ñ–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
import sys # sys - —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ñ—É–Ω–∫—Ü–∏–∏


print(os.listdir()) # listdir - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏


# PATH = 'lesson4/lesson4.py'

# if os.path.exists(PATH):
#     print('–§–∞–π–ª —ñ—Å–Ω—É—î')    
# else:
#     print('–§–∞–π–ª –Ω–µ —ñ—Å–Ω—É—î')
#     os.mkdir(PATH) # mkdir - —Å—Ç–≤–æ—Ä–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é
#     print('–§–∞–π–ª —Å—Ç–≤–æ—Ä–µ–Ω–æ')


# if os.path.isdir(PATH): # isdir - —Ü–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è?
#     print('—Ü–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è')
# else:
#     print('—Ü–µ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è')

# os.rmdir(PATH) # rmdir - –≤–∏–¥–∞–ª–∏—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é, —è–∫—â–æ –≤–æ–Ω–∞ –ø—É—Å—Ç–∞
# os.remove(PATH) # remove - –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª


# print(sys.version) # –≤–µ—Ä—Å–∏—è Python


# my_file = open('text.txt', 'w',encoding="utf-8")    # open - –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª (w - write, r - read, a - append, b - binary)
# my_file.write('Hello world\n')
# my_file.write('Hello world\n')
# my_file.write('Hello world\n')
# my_file.close() # close - –∑–∞–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª

# my_file2 = open('text.txt', 'r' )    # open - –≤—ñ–¥–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª (w - write, r - read, a - append, b - binary)
# print(my_file2.read()) # read - –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª
# my_file2.close() # close - –∑–∞–∫—Ä–∏—Ç–∏ —Ñ–∞–π–ª


# with open('text.txt', 'r' ) as my_file3: # with - –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª
#     print(my_file3.read()) # read - –ø—Ä–æ—á–∏—Ç–∞—Ç–∏ —Ñ–∞–π–ª
# print('file is closed')

# # encoding - –∫–æ–¥—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª–∞ (utf-8, cp1251, cp866, koi8-r)
# # "–£" - 1043 - 0x0412 - 0b100000010010 - –ö–æ–¥–∏—Ä–æ–≤–∫–∞ UTF-8
# # "–£" - 1059 - 0x0423 - 0b100000110011 - –ö–æ–¥–∏—Ä–æ–≤–∫–∞ CP1251'


# ===================== –ú–û–î–£–õ–Ü =====================

# from gtts import gTTS
  
# # This module is imported so that we can 
# # play the converted audio
# import os
  
# # The text that you want to convert to audio
# mytext = 'üëçü§î'
  
# # Language in which you want to convert
# language = 'uk'
  
# # Passing the text and language to the engine, 
# # here we have marked slow=False. Which tells 
# # the module that the converted audio should 
# # have a high speed
# myobj = gTTS(text=mytext, lang=language, slow=False)
  
# # Saving the converted audio in a mp3 file named
# # welcome 
# myobj.save("welcome3.mp3")



# from faker import Faker 

# fake = Faker('uk_UA') # uk_UA - —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞

# for _ in range(10):
#   print(fake.name(), fake.address(), fake.phone_number(), fake.email(), fake.text())
#   print('=====================')


# print(fake.first_name())
# print(fake.last_name())
# print(fake.first_name_male())
# print(fake.first_name_female())
# print(fake.job())







# ===================== CLASS =====================

# class - —à–∞–±–ª–æ–Ω –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç—ñ–≤

class Cat:
    """
    –¶–µ –∫–ª–∞—Å –∫–æ—Ç–∞
    """
    # self - —Ü–µ –æ–±'—î–∫—Ç, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫–ª–∞—Å—É
    def __init__(self, name='–ú—É—Ä–∑–∏–∫'):# __init__ - –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∫–ª–∞—Å—É
        self.syper_var = 123
        self.name = name
        self.color = '–ù–µ–≤—ñ–¥–æ–º–∏–π'
        self._master_name = '–í–∞—Å—è' # _ - –ø—Ä–∏–≤–∞—Ç–Ω–∞ –∑–º—ñ–Ω–Ω–∞
        self.__master_last_name = '–ü—É–ø–∫—ñ–Ω' # __ - –ø—Ä–∏–≤–∞—Ç–Ω–∞ –∑–º—ñ–Ω–Ω–∞
        
    def meow(self): # –º–µ—Ç–æ–¥ –∫–ª–∞—Å—É
        print(f'{self.name} –≥–æ–≤–æ—Ä–∏—Ç—å –ú–Ø–£ –ú–Ø–£')
        
    def eat(self, food):
        print(f'{self.name} —ó—Å—Ç—å {food}')
    
    def sleep(self):
        print(f'{self.name} —Å–ø–∏—Ç—å')


# –ù–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è –∫–ª–∞—Å—ñ–≤ - class Child(Parent): - –∫–ª–∞—Å Child –Ω–∞—Å–ª—ñ–¥—É—î—Ç—å—Å—è –≤—ñ–¥ –∫–ª–∞—Å—É Parent —ñ –º–∞—î –≤—Å—ñ –π–æ–≥–æ –º–µ—Ç–æ–¥–∏ —ñ –∑–º—ñ–Ω–Ω—ñ

class Tiger(Cat):
    def __init__(self, name):
        super().__init__(name) # super() - –≤–∏–∫–ª–∏–∫ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–ª–∞—Å—É (Cat)
        self.color = '–ó–æ–ª–æ—Ç–∏—Å—Ç–∏–π'
    
    def meow(self): # –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–µ—Ç–æ–¥—É –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–ª–∞—Å—É
        print(f'{self.name} –≥–æ–≤–æ—Ä–∏—Ç—å –ì–†–†–†–†')
    
    def eat(self, food):
        print(f'{self.name} —ó—Å—Ç—å {food} —ñ –ø"—î –∫—Ä–æ–≤') 
        
    def run(self):
        print(f'{self.name} –±—ñ–∂–∏—Ç—å')


tigrylya = Tiger('–¢–∏–≥—Ä–µ–Ω—è')
print(tigrylya.color)
tigrylya.eat('–ú—è—Å–æ')
tigrylya.meow()
tigrylya.sleep()
tigrylya.run()


# tom = Cat("–Ñ–∂–∏–∫")
# print(tom.name)
# print(tom.syper_var)
# tom.color = '–ß–æ—Ä–Ω–æ–≥–æ'
# print(f'–ö–æ—Ç–∞ –∑–≤–∞—Ç–∏ {tom.name} —ñ –≤—ñ–Ω {tom.color} –∫–æ–ª—å–æ—Ä—É')

# tom.meow()
# tom.eat('–ú–æ–ª–æ–∫–æ')
# tom.name = '–¢–æ–º–∞—Å'
# tom.sleep()
# tom.meow()
# tom.eat('–ú–æ–ª–æ–∫–æ')
# tom.lol = 'lol'
# print(tom.lol)

# print(tom._master_name)
# print(tom._Cat__master_last_name)
# print(tom.__dict__)



